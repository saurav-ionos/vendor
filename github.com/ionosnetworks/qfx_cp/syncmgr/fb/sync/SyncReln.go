// automatically generated by the FlatBuffers compiler, do not modify

package sync

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SyncReln struct {
	_tab flatbuffers.Table
}

func GetRootAsSyncReln(buf []byte, offset flatbuffers.UOffsetT) *SyncReln {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SyncReln{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SyncReln) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SyncReln) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SyncReln) SyncId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SyncReln) SyncName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SyncReln) SrcCSId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SyncReln) SrcCSDir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SyncReln) ExDirList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SyncReln) ExDirListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SyncReln) DstCSs(obj *DstCSSyncInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SyncReln) DstCSsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SyncReln) TenantName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SyncReln) TriggerType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 3
}

func (rcv *SyncReln) MutateTriggerType(n int8) bool {
	return rcv._tab.MutateInt8Slot(18, n)
}

func (rcv *SyncReln) SpeedType() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *SyncReln) MutateSpeedType(n int8) bool {
	return rcv._tab.MutateInt8Slot(20, n)
}

func (rcv *SyncReln) OverWrite() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *SyncReln) MutateOverWrite(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func SyncRelnStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func SyncRelnAddSyncId(builder *flatbuffers.Builder, syncId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(syncId), 0)
}
func SyncRelnAddSyncName(builder *flatbuffers.Builder, syncName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(syncName), 0)
}
func SyncRelnAddSrcCSId(builder *flatbuffers.Builder, srcCSId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(srcCSId), 0)
}
func SyncRelnAddSrcCSDir(builder *flatbuffers.Builder, srcCSDir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(srcCSDir), 0)
}
func SyncRelnAddExDirList(builder *flatbuffers.Builder, exDirList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(exDirList), 0)
}
func SyncRelnStartExDirListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SyncRelnAddDstCSs(builder *flatbuffers.Builder, dstCSs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dstCSs), 0)
}
func SyncRelnStartDstCSsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SyncRelnAddTenantName(builder *flatbuffers.Builder, tenantName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(tenantName), 0)
}
func SyncRelnAddTriggerType(builder *flatbuffers.Builder, triggerType int8) {
	builder.PrependInt8Slot(7, triggerType, 3)
}
func SyncRelnAddSpeedType(builder *flatbuffers.Builder, speedType int8) {
	builder.PrependInt8Slot(8, speedType, 1)
}
func SyncRelnAddOverWrite(builder *flatbuffers.Builder, overWrite byte) {
	builder.PrependByteSlot(9, overWrite, 1)
}
func SyncRelnEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
