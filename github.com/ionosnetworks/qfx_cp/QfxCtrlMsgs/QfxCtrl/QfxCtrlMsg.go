// automatically generated by the FlatBuffers compiler, do not modify

package QfxCtrl

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QfxCtrlMsg struct {
	_tab flatbuffers.Table
}

func GetRootAsQfxCtrlMsg(buf []byte, offset flatbuffers.UOffsetT) *QfxCtrlMsg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QfxCtrlMsg{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QfxCtrlMsg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QfxCtrlMsg) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *QfxCtrlMsg) Version() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QfxCtrlMsg) MutateVersion(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *QfxCtrlMsg) Msgid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QfxCtrlMsg) MutateMsgid(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *QfxCtrlMsg) Msgtype() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QfxCtrlMsg) MutateMsgtype(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *QfxCtrlMsg) NeedAck() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QfxCtrlMsg) MutateNeedAck(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *QfxCtrlMsg) MsgType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QfxCtrlMsg) MutateMsgType(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *QfxCtrlMsg) Msg(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func QfxCtrlMsgStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func QfxCtrlMsgAddVersion(builder *flatbuffers.Builder, version int32) {
	builder.PrependInt32Slot(0, version, 0)
}
func QfxCtrlMsgAddMsgid(builder *flatbuffers.Builder, msgid int32) {
	builder.PrependInt32Slot(1, msgid, 0)
}
func QfxCtrlMsgAddMsgtype(builder *flatbuffers.Builder, msgtype int32) {
	builder.PrependInt32Slot(2, msgtype, 0)
}
func QfxCtrlMsgAddNeedAck(builder *flatbuffers.Builder, needAck int32) {
	builder.PrependInt32Slot(3, needAck, 0)
}
func QfxCtrlMsgAddMsgType(builder *flatbuffers.Builder, msgType byte) {
	builder.PrependByteSlot(4, msgType, 0)
}
func QfxCtrlMsgAddMsg(builder *flatbuffers.Builder, msg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(msg), 0)
}
func QfxCtrlMsgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
